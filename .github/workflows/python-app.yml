# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # STEP 1: Checkout code FIRST
    - name: Checkout code
      uses: actions/checkout@v4

    # STEP 2: Set up Python SECOND
    - name: Set up Python 3.10
      uses: actions/setup-python@v4  # Updated to v4
      with:
        python-version: "3.10"

    # STEP 3: Install system dependencies for python-magic
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 libmagic-dev

    # STEP 4: Install Python dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-mock
        pip install python-magic Pillow openai PyPDF2
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    # STEP 5: Set Python path for imports (AFTER checkout and setup)
    - name: Set Python path for imports
      run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    # STEP 6: Verify setup works
    - name: Verify setup
      run: |
        echo "Files in workspace:"
        ls -la *.py
        echo "Testing import..."
        python -c "from file_organizer import SmartFileOrganizer; print('âœ… Import successful!')"

    # STEP 7: Lint with flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # STEP 8: Test with pytest
    - name: Test with pytest
      run: |
        # Run tests from the tests directory
        if [ -f "tests/test_unit_tests.py" ]; then
          pytest tests/test_unit_tests.py -v --tb=short
        elif [ -f "test_file_organizer.py" ]; then
          pytest test_file_organizer.py -v --tb=short
        else
          echo "No test file found, running pytest discovery"
          pytest -v --tb=short
        fi
